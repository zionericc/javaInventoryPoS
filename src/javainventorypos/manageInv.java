/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javainventorypos;
import static javainventorypos.insertInv.isNumeric;
import java.sql.*;
import javax.swing.*;
import java.time.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Chan
 */
public class manageInv extends javax.swing.JFrame {
    
    Connection con = null;
    Statement stmt = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    int qty = 0;
    String lbl = null;
    String prc = null;
    float uTotal = 0;
    float gTotal = 0;
    float dTotal = 0;
    String computerName = getCompName();
    
    ESCPrinter escp = new ESCPrinter("\\\\"+computerName+"\\LX-310", false); //create ESCPrinter on network location \\computer\sharename, 9pin printer
    
    /**
     * Creates new form manageInv
     */
    public manageInv() {
        System.out.println(computerName);
        System.out.println(escp.initialize());
        initComponents();
        retrievetransID();
        retrieveprodComboxData();
//        retrieveqtyComboxData();
//        retrievelabelData();
//        retrievepriceData();
//        getTotalPrice();
        
        prodCombox1.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                retrieveqtyComboxData();
                retrievelabelData();
                retrievepriceData();
                getTotalPrice();
            }
        });
        
        qtyCombox1.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                if (qtyCombox1.getSelectedIndex() != -1){
                getTotalPrice();
            }
            }
        });
    }
//        qtyCombox1.addMouseListener(new MouseAdapter() {
//            @Override
//            public void mouseClicked(MouseEvent e) {
//                retrieveqtyComboxData();
//                System.out.println(prodCombox1.getSelectedItem());
//        }
//    });

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        prodCombox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        qtyCombox1 = new javax.swing.JComboBox<>();
        code1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        prc1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemsTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        receiptButton = new javax.swing.JButton();
        total1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        gTotal1 = new javax.swing.JLabel();
        transid = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        disc1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        net1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        less1 = new javax.swing.JLabel();
        total2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        customerTF = new javax.swing.JTextField();
        addressTF = new javax.swing.JTextField();
        termTF = new javax.swing.JTextField();
        ponoTF = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        shipTF = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        remarkTF = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        receiveTF = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        prepareTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(1063, 750));

        prodCombox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodCombox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Product");

        jLabel2.setText("Qty");

        qtyCombox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyCombox1ActionPerformed(evt);
            }
        });

        code1.setText("code");

        jLabel3.setText("Unit Price");

        prc1.setText("0");

        itemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qty", "Unit Price", "Code", "Product", "Total Price", "Discount", "Net Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemsTable);

        jLabel4.setText("Code");

        addButton.setText("Add Item");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Remove Item");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        receiptButton.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        receiptButton.setText("Print Receipt");
        receiptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptButtonActionPerformed(evt);
            }
        });

        total1.setText("0");

        jLabel5.setText("Total Price");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("GRAND TOTAL:");

        gTotal1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        gTotal1.setText("0");

        transid.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        transid.setText("0");
        transid.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Transaction ID:");

        jLabel8.setText("Discount");

        disc1.setText("0");

        jLabel10.setText("Net Price");

        net1.setText("0");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("TOTAL:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("LESS:");

        less1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        less1.setText("0");

        total2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total2.setText("0");

        jLabel12.setText("Customer:");

        jLabel13.setText("Address:");

        jLabel14.setText("Terms:");

        jLabel15.setText("P.O. No:");

        jLabel16.setText("days");

        jLabel17.setText("Shipped By:");

        jLabel18.setText("Remarks:");

        jLabel19.setText("Received By:");

        jLabel20.setText("Prepared By:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(qtyCombox1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(prc1))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(code1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(prodCombox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(132, 132, 132)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 115, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(total1))
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(disc1))
                                .addGap(37, 37, 37)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(net1)
                                    .addComponent(jLabel10))
                                .addGap(44, 44, 44))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addressTF)
                                    .addComponent(customerTF))
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                                .addComponent(transid))
                            .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel14))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(termTF)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel16))
                                    .addComponent(ponoTF)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(less1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(gTotal1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(total2))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(receiptButton, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(jLabel17)
                            .addComponent(shipTF)
                            .addComponent(jLabel18)
                            .addComponent(remarkTF)
                            .addComponent(jLabel19)
                            .addComponent(receiveTF)
                            .addComponent(jLabel20)
                            .addComponent(prepareTF))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transid)
                    .addComponent(jLabel7)
                    .addComponent(jLabel12)
                    .addComponent(customerTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addressTF)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(termTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(ponoTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel13))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10)
                    .addComponent(addButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prodCombox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyCombox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(code1)
                    .addComponent(prc1)
                    .addComponent(total1)
                    .addComponent(disc1)
                    .addComponent(net1)
                    .addComponent(deleteButton))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shipTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remarkTF, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(receiveTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prepareTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(receiptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(total2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(less1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(gTotal1))))
                .addGap(327, 327, 327))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private String getCompName(){
        try{
            computerName = InetAddress.getLocalHost().getHostName();
        }
        catch(Exception e){
            System.out.println("COULDN'T GET HOST NAME" + e);
        }
        return computerName;
    }
    
    private void receiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptButtonActionPerformed
        // TODO add your handling code here:
                
        //CONFIRMATION
        int returnValue = 0;
    	
        returnValue = JOptionPane.showConfirmDialog(null, "ARE YOU SURE YOU WANT TO PRINT THE RECEIPT NOW?", "DOUBLE CHECK ITEMS", JOptionPane.YES_NO_OPTION);
    		
    	if (returnValue == JOptionPane.YES_OPTION){
            
            int r = itemsTable.getRowCount();
        
            if (r == 0){
                JOptionPane.showMessageDialog(null, "There are no items in the table.");
            }
            else{
                //START           
                if (escp.initialize()) {
                    printReceipt();
                    addTransaction();
                    updateDB();
                    retrievetransID();
                    clearPrice();
                }
                else{
                    System.out.println("Couldn't open stream to printer. Please check printer and retry.");
                }
            }
        }
    	else if (returnValue == JOptionPane.NO_OPTION){
        }
    }//GEN-LAST:event_receiptButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        deleteRow();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        fillTable();
        addGTotalPrice();
    }//GEN-LAST:event_addButtonActionPerformed

    private void qtyCombox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyCombox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyCombox1ActionPerformed

    private void prodCombox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodCombox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prodCombox1ActionPerformed

    private void retrievetransID(){
        try{
        con= DriverManager.getConnection("jdbc:mysql://localhost/inventory","root","");  
        stmt = con.createStatement();

        rs = stmt.executeQuery("SELECT * FROM transactions ORDER by transid DESC LIMIT 1");

        rs.next();
        int trans = Integer.parseInt(rs.getString("transid"))+1;
        String ftrans = String.valueOf(trans);
        
        transid.setText(ftrans);


        con.close();
        }
        catch (SQLException e) {  
        JOptionPane.showMessageDialog(null, e);  
        }
    }
    
    private void retrieveprodComboxData(){
        
        ArrayList<String> productList = new ArrayList<String>( );
        
        try{
        con= DriverManager.getConnection("jdbc:mysql://localhost/inventory","root","");  
        stmt = con.createStatement();

        rs = stmt.executeQuery("select prodname from inv");

        while (rs.next()) {  
            productList.add(rs.getString("prodname"));
        }
        
        Collections.sort(productList);
        
        System.out.println(productList);
        System.out.println(productList.get(0));
        System.out.println(productList.size());
        System.out.println(productList.get(productList.size()-1));
        
        for(int i = 1; i <= productList.size(); i++){
            prodCombox1.addItem(productList.get(i-1));
        }
        
            con.close();
        }
        catch (SQLException e) {  
        JOptionPane.showMessageDialog(null, e);  
        }
    }
    
    private void retrieveqtyComboxData(){
        
        qtyCombox1.removeAllItems();
        
        try{
        con= DriverManager.getConnection("jdbc:mysql://localhost/inventory","root","");  
        stmt = con.createStatement();
        String prodname = prodCombox1.getSelectedItem().toString();
        rs = stmt.executeQuery("select stock from inv where prodname='"+prodname+"'");

        rs.next();
        qty = rs.getInt("stock");
        System.out.println(qty);
        
        if (qty == 0){
            JOptionPane.showMessageDialog(null, "NO STOCK.");
            qtyCombox1.addItem(String.valueOf(qty));
        }
        
        else{
            for (int i = 1; i <= qty; i++){
                qtyCombox1.addItem(String.valueOf(i));
            }
        }
        
            con.close();
        }
        
        catch (SQLException e) {  
        JOptionPane.showMessageDialog(null, e);  
        }
    }
    
    private void retrievelabelData(){
        
        try{
        con= DriverManager.getConnection("jdbc:mysql://localhost/inventory","root","");  
        stmt = con.createStatement();
        String prodname = prodCombox1.getSelectedItem().toString();
        rs = stmt.executeQuery("select prodcode from inv where prodname='"+prodname+"'");

        rs.next();
        lbl = rs.getString("prodcode");
        code1.setText(lbl);
        
        System.out.println(lbl);
       

            con.close();
        }
        catch (SQLException e) {  
        JOptionPane.showMessageDialog(null, e);  
        }
    }
    
    private void retrievepriceData(){
        
        try{
            con= DriverManager.getConnection("jdbc:mysql://localhost/inventory","root","");
            stmt = con.createStatement();
            String prodname = prodCombox1.getSelectedItem().toString();
            rs = stmt.executeQuery("select price from inv where prodname='"+prodname+"'");

            rs.next();
            prc = rs.getString("price");
            prc1.setText(prc);

            System.out.println(prc);


            con.close();
        }
        catch (SQLException e) {  
            JOptionPane.showMessageDialog(null, e);  
        }
    }
    
    private void getTotalPrice(){
        int qty = Integer.parseInt(qtyCombox1.getSelectedItem().toString());
        int price = Integer.parseInt(prc1.getText());
        
        int total = qty*price;
        total1.setText(String.valueOf(total));
        if(qty >= 1){ // DISCOUNT MAGICS QTY
            disc1.setText("20");
            float net = total*(float).80;
            net1.setText(String.valueOf((String.format("%.2f", net))));
        }
        else{
            disc1.setText("0");
            net1.setText(String.valueOf(total));
        }
    }
    
    private void addGTotalPrice(){
        float itemprc = Float.parseFloat(total1.getText());
        float dprc = Float.parseFloat(net1.getText());
        uTotal = uTotal + itemprc;
        dTotal = dTotal + (itemprc - dprc);
        gTotal = gTotal + dprc;
        total2.setText(String.valueOf((String.format("%.2f", uTotal))));
        less1.setText(String.valueOf((String.format("%.2f", dTotal))));
        gTotal1.setText(String.valueOf((String.format("%.2f", gTotal))));   
    }
    
    private void fillTable(){ //GET VALUES FROM CHOICE AND PUT IN TABLE
        String inputField1 = qtyCombox1.getSelectedItem().toString();
        String inputField2 = prc1.getText();
        String inputField3 = code1.getText();
        String inputField4 = prodCombox1.getSelectedItem().toString();
        String inputField5 = total1.getText();
        String inputField6 = "0"; //LESS THAN 5
        if(Integer.parseInt(qtyCombox1.getSelectedItem().toString()) >= 1){ //DISCOUNT MAGICS QTY
            inputField6 = "20";
        }
        String inputField7 = net1.getText();
        DefaultTableModel model = (DefaultTableModel) itemsTable.getModel();
//        int numRows = itemsTable.getRowCount();
//        for (int i = 0; i <= numRows; i++){
//            model.setValueAt(inputField1, i, 0);
//            model.setValueAt(inputField2, i, 1);
//            model.setValueAt(inputField3, i, 2);
//            model.setValueAt(inputField4, i, 3);      
//        }
        model.addRow(new Object[]{inputField1, inputField2, inputField3, inputField4, inputField5, inputField6, inputField7});
    }
    
    private void deleteRow(){
        int r = itemsTable.getSelectedRow();
        if (r != -1){
            DefaultTableModel model = (DefaultTableModel) itemsTable.getModel();
            float itemprc = Float.parseFloat(model.getValueAt(r, 4).toString());
            float dprc = Float.parseFloat(model.getValueAt(r,6).toString());
            uTotal = uTotal - itemprc;
            dTotal = dTotal - (itemprc - dprc);
            gTotal = gTotal - dprc;
            total2.setText(String.valueOf((String.format("%.2f", uTotal))));
            less1.setText(String.valueOf((String.format("%.2f", dTotal))));
            gTotal1.setText(String.valueOf((String.format("%.2f", gTotal))));
            model.removeRow(r);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select an item from the table.");
        }
    }
    
    private void updateDB(){
        try{
        con= DriverManager.getConnection("jdbc:mysql://localhost/inventory","root","");
        
        int r = itemsTable.getRowCount();

            for (int i = 0; i < r; i++){
                String sql = "UPDATE inv SET stock=stock-? WHERE prodcode=?";
                pst = con.prepareStatement(sql);
                String stock = (String) itemsTable.getModel().getValueAt(i,0);
                String prodcode = (String) itemsTable.getModel().getValueAt(i, 2);
                pst.setString(1,stock);
                pst.setString(2,prodcode);
                pst.executeUpdate();
            }
        DefaultTableModel model = (DefaultTableModel) itemsTable.getModel();
        model.setRowCount(0);
        }
        catch (SQLException e) {  
        JOptionPane.showMessageDialog(null, e);  
        }
    }
    
    private void addTransaction(){
        try{
        con= DriverManager.getConnection("jdbc:mysql://localhost/inventory","root","");
        
        int r = itemsTable.getRowCount();

            LocalDate transdate = LocalDate.now(ZoneId.of( "Asia/Shanghai" ));
            java.sql.Date sqlDate = java.sql.Date.valueOf(transdate);
            for (int i = 0; i < r; i++){
                String sql = "INSERT INTO transactions(transid,qty,price,prodcode,prodname,tprice,discount,nprice,transdate,tinout,customer,address,term,pono,ship,receive,remark,prepare) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                pst = con.prepareStatement(sql);
                String transID = transid.getText();
                String qty = (String) itemsTable.getModel().getValueAt(i,0);
                String price = (String) itemsTable.getModel().getValueAt(i, 1);
                String prodcode = (String) itemsTable.getModel().getValueAt(i, 2);
                String prodname = (String) itemsTable.getModel().getValueAt(i, 3);
                String tprice = (String) itemsTable.getModel().getValueAt(i, 4);
                String discount = (String) itemsTable.getModel().getValueAt(i, 5);
                String nprice = (String) itemsTable.getModel().getValueAt(i, 6);
                String tinout = "OUT";
                String customer = customerTF.getText();
                String address = addressTF.getText();
                String term = termTF.getText();
                String pono = ponoTF.getText();
                String ship = shipTF.getText();
                String receive = receiveTF.getText();
                String remark = remarkTF.getText();
                String prepare = prepareTF.getText();
                
                pst.setString(1,transID);
                pst.setString(2,qty);
                pst.setString(3,price);
                pst.setString(4,prodcode);
                pst.setString(5,prodname);
                pst.setString(6,tprice);
                pst.setString(7,discount);
                pst.setString(8,nprice);
                pst.setDate(9,sqlDate);
                pst.setString(10, tinout);
                pst.setString(11, customer);
                pst.setString(12, address);
                pst.setString(13, term);
                pst.setString(14, pono);
                pst.setString(15, ship);
                pst.setString(16, receive);
                pst.setString(17, remark);
                pst.setString(18, prepare);
                pst.executeUpdate();
            }
        }
        catch (SQLException e) {  
        JOptionPane.showMessageDialog(null, e);  
        }
    }
    
    private void printReceipt(){

            int r = itemsTable.getRowCount();
            
            String transdate = LocalDate.now(ZoneId.of( "Asia/Shanghai" )).format(DateTimeFormatter.ofPattern("MM/dd/yyyy"));
            String transID = transid.getText();
            String uTotal = total2.getText();
            String nTotal = gTotal1.getText();
            String dTotal = less1.getText();
            escp.setCharacterSet(ESCPrinter.USA);
            escp.select15CPI(); //15 characters per inch printing
            escp.setMargins(5, 5);
            
            
            //HEADER -- NAME and ADDRESS
            escp.centerText();
            escp.bold(true);
            escp.doubleHeightOn();
            escp.doubleWidthOn();
            escp.print("COMPANY NAME");
            escp.leftJustify();
            escp.doubleHeightOff();
            escp.doubleWidthOff();
//            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.bold(false);
            escp.centerText();
            escp.print("ADDRESS");
            escp.leftJustify();
            
            
            //CUSTOMER ADDRESS ID DATE TERMS PONO
            String customer = customerTF.getText();
            String address = addressTF.getText();
            String term = termTF.getText();
            String pono = ponoTF.getText();

            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.bold(true);
            escp.print("CUSTOMER:");
            escp.setAbsoluteHorizontalPosition(3);
            escp.bold(false);
            escp.print(customer);
            escp.setAbsoluteHorizontalPosition(14);
            escp.bold(true);
            escp.horizontalTab(1);
            escp.print(String.format("%10s","NO.:"));
            escp.horizontalTab(1);
            escp.bold(false);
            escp.print(String.format("%10s",transID));
            
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.bold(true);
            escp.print("ADDRESS:");
            escp.setAbsoluteHorizontalPosition(3);
            escp.bold(false);
            escp.print(address);
            escp.setAbsoluteHorizontalPosition(14);
            escp.horizontalTab(1);
            escp.bold(true);
            escp.print(String.format("%10s","DATE:"));
            escp.horizontalTab(1);
            escp.bold(false);
            escp.print(String.format("%10s",transdate));
            
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(14);
            escp.horizontalTab(1);
            escp.bold(true);
            escp.print(String.format("%10s","P.O. NO.:"));
            escp.horizontalTab(1);
            escp.bold(false);
            escp.print(String.format("%10s",pono));
            
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(14);
            escp.horizontalTab(1);
            escp.bold(true);
            escp.print(String.format("%10s","TERMS:"));
            escp.horizontalTab(1);
            escp.bold(false);
            if (isNumeric(term) == false){
                escp.print(String.format("%10s",term));
            }
            else{
                escp.print(String.format("%10s",term + " DAYS"));
            }
            
            
            //LABELS
            escp.advanceVertical((float).5);
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.bold(true);
            escp.print("-------------------------------------------------------------------------------------------------------------------");
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.print("QTY");
            escp.setAbsoluteHorizontalPosition(1);
            escp.print("UNIT");
            escp.setAbsoluteHorizontalPosition(3);
            escp.print("PRODUCT DESCRIPTION");
            escp.setAbsoluteHorizontalPosition(14);
            escp.horizontalTab(1);
            escp.print("UNIT PRICE");
            escp.horizontalTab(1);
            escp.print(String.format("%10s","TOTAL"));
            escp.bold(false);
            
            //PRODUCTS
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.bold(true);
            escp.print("-------------------------------------------------------------------------------------------------------------------");
            escp.bold(false);

            for (int i = 0; i < r; i++){
                String qty = (String) itemsTable.getModel().getValueAt(i,0);
                float fprice = Float.parseFloat((String)itemsTable.getModel().getValueAt(i, 1));
                String price = (String.format("%.2f", fprice));
//                String prodcode = (String) itemsTable.getModel().getValueAt(i, 2);
                String prodname = (String) itemsTable.getModel().getValueAt(i, 3);
                float ftprice = Float.parseFloat((String) itemsTable.getModel().getValueAt(i, 4));
                String tprice = (String.format("%.2f", ftprice));
//                String nprice = (String) itemsTable.getModel().getValueAt(i, 6);
                escp.advanceVertical((float).5);
                escp.setAbsoluteHorizontalPosition(0);
                escp.print(qty);
                escp.setAbsoluteHorizontalPosition(1);
                escp.print("Pcs");
                escp.setAbsoluteHorizontalPosition(3);
                escp.print(prodname);
                escp.setAbsoluteHorizontalPosition(14);
                escp.horizontalTab(1);
                String rlprice = String.format("%10s",price);
                escp.print(rlprice);
                escp.horizontalTab(1);
                String rltprice = String.format("%10s",tprice);
                escp.print(rltprice);
            }
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(14);
            escp.horizontalTab(3);
            escp.print(String.format("%10s","__________"));
            escp.bold(true);
            
            if(!"0.00".equals(dTotal)){// IF THERE IS DISCOUNT
                escp.advanceVertical((float).5);
                escp.setAbsoluteHorizontalPosition(14);
                escp.horizontalTab(1);
                String rlsTotal = String.format("%10s","Subtotal:");
                escp.print(rlsTotal);
                escp.horizontalTab(1);
                String rluTotal = String.format("%10s", uTotal);
                escp.print(rluTotal);
                escp.advanceVertical((float).5);
                escp.setAbsoluteHorizontalPosition(14);
                escp.horizontalTab(1);
                String rlless = String.format("%10s","Less:");
                escp.print(rlless);
                escp.horizontalTab(1);
                String rldTotal = String.format("%10s", dTotal);
                escp.print(rldTotal);
                escp.advanceVertical((float).5);
                escp.setAbsoluteHorizontalPosition(14);
                escp.horizontalTab(3);
                escp.print(String.format("%10s","__________"));
            }
            
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(14);
            escp.horizontalTab(1);
            String rltotal = String.format("%10s","Total:");
            escp.print(rltotal);
            escp.horizontalTab(1);
            String rlgTotal = String.format("%10s",nTotal);
            escp.print(rlgTotal);
            
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.print("-------------------------------------------------------------------------------------------------------------------");
            escp.bold(false);
            
            //FOOTER -- SHIP REMARK RECEIVE PREPARE
            String ship = shipTF.getText();
            String receive = receiveTF.getText();
            String remark = remarkTF.getText();
            String prepare = prepareTF.getText();
            
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.bold(true);
            escp.print("SHIPPED BY: ");
            escp.bold(false);
            escp.print(ship);
            escp.setAbsoluteHorizontalPosition(5);
            escp.horizontalTab(3);
            escp.bold(true);
            escp.print("PREPARED BY: ");
            escp.bold(false);
            escp.print(prepare);
            
            
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(0);
            escp.bold(true);
            escp.print("REMARKS: ");
            escp.bold(false);
            escp.print(remark);
            
            
            escp.advanceVertical(1);
            escp.setAbsoluteHorizontalPosition(5);
            escp.horizontalTab(9);
            escp.print(receive);
            escp.setAbsoluteHorizontalPosition(5);
            escp.horizontalTab(8);
            escp.bold(true);
            escp.print("___________________________");
            escp.advanceVertical((float).5);
            escp.setAbsoluteHorizontalPosition(5);
            escp.horizontalTab(9);
            escp.print("RECEIVED BY");
            escp.bold(false);
            
            
            //EJECT PAPER, PRINTING DONE
            escp.formFeed(); //eject paper
            escp.close(); //close stream
    }
    
    private void clearPrice(){
        uTotal = 0;
        dTotal = 0;
        gTotal = 0;
        total2.setText("0");
        less1.setText("0");
        gTotal1.setText("0");
        customerTF.setText("");
        addressTF.setText("");
        termTF.setText("");
        ponoTF.setText("");
        shipTF.setText("");
        remarkTF.setText("");
        receiveTF.setText("");
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manageInv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageInv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manageInv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manageInv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manageInv().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField addressTF;
    private javax.swing.JLabel code1;
    private javax.swing.JTextField customerTF;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel disc1;
    private javax.swing.JLabel gTotal1;
    private javax.swing.JTable itemsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel less1;
    private javax.swing.JLabel net1;
    private javax.swing.JTextField ponoTF;
    private javax.swing.JLabel prc1;
    private javax.swing.JTextField prepareTF;
    private javax.swing.JComboBox<String> prodCombox1;
    private javax.swing.JComboBox<String> qtyCombox1;
    private javax.swing.JButton receiptButton;
    private javax.swing.JTextField receiveTF;
    private javax.swing.JTextField remarkTF;
    private javax.swing.JTextField shipTF;
    private javax.swing.JTextField termTF;
    private javax.swing.JLabel total1;
    private javax.swing.JLabel total2;
    private javax.swing.JLabel transid;
    // End of variables declaration//GEN-END:variables
}
